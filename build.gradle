//Don't touch this unless you want me to murder you (in minecraft)
plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2024.1.1"
    id 'jacoco'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def ROBOT_MAIN_CLASS = "org.bitbuckets.bootstrap.Main"

repositories {
    maven {
        url "https://repo.superyuuki.com/snapshots"
    }
    maven {
        url "https://repo.superyuuki.com/releases"
    }
}

deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {

            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)
            artifacts {
                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    gcType = edu.wpi.first.gradlerio.deploy.roborio.GarbageCollectorType.Other
                    jvmArgs << '' +
                            '-XX:+UseG1GC'
                }
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

wpi.java.debugJni = false


dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.0.0'

    implementation 'xyz.auriium:mattlib2-log-nt:1.1.2-SNAPSHOT'
    implementation 'xyz.auriium:mattlib2-rev:1.1.2-SNAPSHOT'
}

test {
    useJUnitPlatform()

    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    finalizedBy jacocoTestReport // report is always generated after tests run

}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

def includeDesktopSupport = true
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

