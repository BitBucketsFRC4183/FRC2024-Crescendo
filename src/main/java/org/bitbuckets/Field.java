package org.bitbuckets;

import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.geometry.Translation3d;

/**
 * WRT blue as 0,0
 * https://firstfrc.blob.core.windows.net/frc2024/FieldAssets/2024FieldDrawings.pdf
 */
public interface Field {

    double X_FIELD_METERS = 16.541;
    double Y_FIELD_METERS = 8.211;

    double Y_MIDPOINT_TO_STEREO_METERS = 1.45;
    double X_WALL_TO_AMP_METERS = 1.93;
    double Z_FLOOR_TO_AMP_HOLE_CENTER_METERS = 0.889;

    double STAGE_TRIANGLE_BASE_METERS = 3.115;
    double STAGE_TRIANGLE_HEIGHT_METERS = 2.697;
    double Z_STAGE_CENTER_CLEARANCE = 0.707;
    //Distance to red and blue alliance walls are different
    double BLUE_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS = 3.073 + STAGE_TRIANGLE_HEIGHT_METERS * 2.0 / 3.0;
    double RED_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS = 3.061 + STAGE_TRIANGLE_HEIGHT_METERS * 2.0 / 3.0;

    double ALLIANCE_WALL_TO_WING_NOTES_METERS = 2.896;
    double WING_NOTES_SEPERATION_METERS = 1.448;
    double CENTER_NOTES_SEPERATION_METERS = 1.676;

    double X_SOURCE_METERS = 1.832;
    double Y_SOURCE_METERS = 1.075;
    double Z_SOURCE_OPENING_CENTER = 1.356;
    double SOURCE_WALL_METERS = 2.026; //length of the entire wall(inside hinges)

    Translation3d BOTTOM_LEFT = new Translation3d(0,0, 0);
    Translation3d TOP_LEFT = new Translation3d(0, Y_FIELD_METERS, 0);

    Translation2d BLUE_STEREO = new Translation2d(0, (Y_FIELD_METERS / 2d) + Y_MIDPOINT_TO_STEREO_METERS);
    Translation2d RED_STEREO = new Translation2d(X_FIELD_METERS, (Y_FIELD_METERS / 2d) + Y_MIDPOINT_TO_STEREO_METERS);

    //center of amp rectangular hole
    Translation3d BLUE_AMP = new Translation3d(X_WALL_TO_AMP_METERS, Y_FIELD_METERS, Z_FLOOR_TO_AMP_HOLE_CENTER_METERS);
    Translation3d RED_AMP = new Translation3d(X_FIELD_METERS - X_WALL_TO_AMP_METERS, Y_FIELD_METERS, Z_FLOOR_TO_AMP_HOLE_CENTER_METERS);

    Translation3d BLUE_STAGE_CENTER = new Translation3d(BLUE_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS, (Y_FIELD_METERS / 2d), Z_STAGE_CENTER_CLEARANCE);
    Translation3d RED_STAGE_CENTER = new Translation3d((X_FIELD_METERS - RED_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS), (Y_FIELD_METERS / 2d), Z_STAGE_CENTER_CLEARANCE);

    //stage legs(metal structure)
    Translation3d BLUE_STAGE_LEFT = new Translation3d((BLUE_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS - STAGE_TRIANGLE_HEIGHT_METERS * 2/3), (Y_FIELD_METERS / 2d), 0);
    Translation3d BLUE_STAGE_TOP = new Translation3d((BLUE_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS + STAGE_TRIANGLE_HEIGHT_METERS * 1/3), (Y_FIELD_METERS / 2d + STAGE_TRIANGLE_BASE_METERS / 2d), 0);
    Translation3d BLUE_STAGE_BOTTOM = new Translation3d((BLUE_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS + STAGE_TRIANGLE_HEIGHT_METERS * 1/3), (Y_FIELD_METERS / 2d - STAGE_TRIANGLE_BASE_METERS / 2d), 0);

    Translation3d RED_STAGE_RIGHT = new Translation3d((X_FIELD_METERS - RED_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS + STAGE_TRIANGLE_HEIGHT_METERS * 2/3), (Y_FIELD_METERS / 2d), 0);
    Translation3d RED_STAGE_TOP = new Translation3d((X_FIELD_METERS - RED_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS - STAGE_TRIANGLE_HEIGHT_METERS * 1/3), (Y_FIELD_METERS / 2d + STAGE_TRIANGLE_BASE_METERS / 2d), 0);
    Translation3d RED_STAGE_BOTTOM = new Translation3d((X_FIELD_METERS - RED_ALLIANCE_WALL_TO_STAGE_CENTROID_METERS - STAGE_TRIANGLE_HEIGHT_METERS * 1/3), (Y_FIELD_METERS / 2d - STAGE_TRIANGLE_BASE_METERS / 2d), 0);

    Translation3d BLUE_WING_NOTE_BOTTOM = new Translation3d(ALLIANCE_WALL_TO_WING_NOTES_METERS, Y_FIELD_METERS / 2d, 0);
    Translation3d BLUE_WING_NOTE_MID = new Translation3d(ALLIANCE_WALL_TO_WING_NOTES_METERS,    Y_FIELD_METERS / 2d + WING_NOTES_SEPERATION_METERS, 0);
    Translation3d BLUE_WING_NOTE_TOP = new Translation3d(ALLIANCE_WALL_TO_WING_NOTES_METERS, Y_FIELD_METERS / 2d + WING_NOTES_SEPERATION_METERS * 2, 0);

    Translation3d RED_WING_NOTE_BOTTOM = new Translation3d(X_FIELD_METERS - ALLIANCE_WALL_TO_WING_NOTES_METERS, Y_FIELD_METERS / 2d, 0);
    Translation3d RED_WING_NOTE_MID = new Translation3d(X_FIELD_METERS - ALLIANCE_WALL_TO_WING_NOTES_METERS, Y_FIELD_METERS / 2d + WING_NOTES_SEPERATION_METERS, 0);
    Translation3d RED_WING_NOTE_TOP = new Translation3d(X_FIELD_METERS - ALLIANCE_WALL_TO_WING_NOTES_METERS, Y_FIELD_METERS / 2d + WING_NOTES_SEPERATION_METERS * 2, 0);

    Translation3d CENTER_NOTE_BOTTOM = new Translation3d(X_FIELD_METERS / 2d, Y_FIELD_METERS / 2d - CENTER_NOTES_SEPERATION_METERS * 2, 0);
    Translation3d CENTER_NOTE_MID_BOTTOM = new Translation3d(X_FIELD_METERS / 2d, Y_FIELD_METERS / 2d - CENTER_NOTES_SEPERATION_METERS, 0);
    Translation3d CENTER_NOTE_MID = new Translation3d(X_FIELD_METERS / 2d, Y_FIELD_METERS / 2d, 0);
    Translation3d CENTER_NOTE_MID_TOP = new Translation3d(X_FIELD_METERS / 2d, Y_FIELD_METERS / 2d + CENTER_NOTES_SEPERATION_METERS, 0);
    Translation3d CENTER_NOTE_TOP = new Translation3d(X_FIELD_METERS / 2d, Y_FIELD_METERS / 2d + CENTER_NOTES_SEPERATION_METERS * 2, 0);

    //center of the source rectangular opening
    Translation3d RED_SOURCE_CENTER = new Translation3d((X_SOURCE_METERS / 2d), (Y_SOURCE_METERS / 2d), Z_SOURCE_OPENING_CENTER);
    Translation3d BLUE_SOURCE_CENTER = new Translation3d((X_FIELD_METERS - X_SOURCE_METERS / 2d), (Y_SOURCE_METERS / 2d), Z_SOURCE_OPENING_CENTER);
}
